language: ko-KR

early_access: true
enable_free_tier: true
reviews:
  profile: chill
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: '@coderabbitai 요약'
  auto_title_placeholder: '@coderabbitai'
  poem: true
  review_status: true
  collapse_walkthrough: false
  path_filters:
    - "!**/swagger.json"
    - "!**/README.md"
  path_instructions:
    - path: "**/*.sql"
      instructions: >
        As a team convention, we do not specify FK constraints. Please avoid suggesting adding FK constraints in code reviews.
        This file is a TypeScript file, but the SQL statements that modify the table structure are written as strings. For columns used as primary keys (PK) or foreign keys (FK), you must follow the convention of specifying the column type as "bigint".
        If a table column name is "id" or ends with "_id", verify that the column type is "bigint". If the SQL is written with a type other than "bigint", issue a warning. This convention is mandatory, so please raise the severity level of the warning. Add the following characters to the beginning of the warning message so that users can easily notice it: 🚨🚨🚨

    - path: "**/*Controller*(V[0-9]*)?.ts"
      instructions: >
        Review the API endpoints based on this guidelines.
        
        ### Richardson Maturity Model (RMM)
        1. Level 0: Single URI with POST requests for all actions.
        2. Level 1: Separate URIs for individual resources.
        3. Level 2: Use of HTTP methods (GET, POST, PUT, DELETE) to define operations on resources.
        4. Level 3: Hypermedia (HATEOAS) for advanced RESTful APIs.
        
        ### API Conventions
        - URI Rules:
          - Should be intuitive and self-explanatory.
          - Should not map 1:1 to database tables.
          - Must be stateless, with no session state between requests.
          - Include "api" and version in the URI (/api/{version}/resource).
          - Use kebab-case for URIs and camelCase for parameters and body contents.
          - Resource identifiers should be unique and only one per URI path.
        
        - Design Principles:
          - APIs should be designed around resources, which are abstractions rather than direct database tables.
          - Stateless APIs facilitate scalability and flexibility.
          - Clear separation of frontend and backend via URI structure.
          - Versioning in URI paths is preferred for clarity and ease of caching.
          - Maintain consistent naming conventions across the API.
          - Use plural forms for resource names (/users instead of /user).
          - Complex actions can include verbs in the URI (/orders/{orderId}/cancel).
        
        - Implementation Details:
          - Avoid deeply nested resource paths to ensure maintainability.
          - Ensure URIs reflect the data they provide, not the permissions or roles required to access them.
          - Keep URIs simple and predictable, aiding both developers and automated systems.

    - path: "**/*.{js,jsx,ts,tsx}"
      instructions: |
        아래의 규칙들은 Toss 프론트엔드 팀 컨벤션(toss-frontend-rules)을 기반으로 합니다. 리뷰 시 아래 항목에 따라 체크하세요.

        1. **불필요한 console.log, debugger 금지**
           - 개발 완료 후에는 console, debugger가 남아있지 않아야 합니다.

        2. **명확하고 일관된 import 순서**
           - 외부 → 내부 → 상대경로 순서. 그룹별 한 줄씩 띄우세요.
           - React 관련 import는 최상단, 스타일 import는 최하단에 위치해야 합니다.

        3. **함수형 컴포넌트 및 Hook 우선**
           - 클래스형 컴포넌트 사용을 지양하고 함수형으로 작성합니다.
           - 커스텀 Hook 네이밍은 use 접두어를 반드시 사용하세요.

        4. **React hooks 규칙 엄격 준수**
           - useEffect 등 Hook은 조건문, 반복문, 중첩 함수 내부에서 선언하면 안 됩니다.

        5. **Props 및 State의 명확한 타입 명시**
           - 모든 props, state에는 TypeScript 타입을 명확히 지정해야 합니다.

        6. **불변성 원칙**
           - State, Props, 객체, 배열 등은 불변성을 지키도록 작성하세요.

        7. **JSX의 가독성**
           - 한 줄에 prop가 많아지면 줄바꿈. 중괄호 중첩은 피하세요.

        8. **매직넘버/매직스트링 최소화**
           - 의미 없는 상수/문자열은 상수 또는 enum 처리하세요.

        9. **컴포넌트/함수 분리**
           - 100줄 이상, 복잡한 로직은 분리/리팩토링을 권장합니다.

        10. **접근성(A11y) 준수**
            - 버튼, a 태그 등에 적절한 aria-* 속성을 사용하고, alt, label 등을 챙기세요.

        11. **eslint, prettier, toss-frontend-rules 위반 자동 검출**
            - 위 세 가지 규칙 위반이 발견될 경우, 리뷰 코멘트와 함께 자동으로 강조해주세요.
            - 위반 시 메시지 앞에 "🚨TOSS-RULE"을 붙여 사용자에게 명확하게 전달하세요.

        위의 컨벤션을 위반하는 부분이 있으면, 반드시 🚨TOSS-RULE prefix와 함께 한글로 명확하게 코멘트 남겨주세요.

  abort_on_close: true
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: []
    labels: []
    drafts: false
    base_branches: []
  tools:
    shellcheck:
      enabled: true
    ruff:
      enabled: true
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 90000
    languagetool:
      enabled: true
      disabled_rules:
        - EN_UNPAIRED_BRACKETS
        - EN_UNPAIRED_QUOTES
      disabled_categories:
        - TYPOS
        - TYPOGRAPHY
        - CASING
      enabled_only: false
      level: default
      enabled_rules: []
      enabled_categories: []
    biome:
      enabled: true
    hadolint:
      enabled: true
    swiftlint:
      enabled: true
    phpstan:
      enabled: true
      level: default
    golangci-lint:
      enabled: true
    yamllint:
      enabled: true
    gitleaks:
      enabled: true
    checkov:
      enabled: true
    ast-grep:
      packages: []
      rule_dirs: []
      util_dirs: []
      essential_rules: true
chat:
  auto_reply: true
knowledge_base:
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    project_keys: []
  linear:
    team_keys: []